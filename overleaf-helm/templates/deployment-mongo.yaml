apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      initContainers:
        - name: init-mongo-replica-set
          image: mongo:6.0
          command:
            - sh
            - -c
            - |
              # wait for MongoDB to be ready
              until mongosh --host localhost --eval 'db.runCommand({ ping: 1 })'; do
                echo "Waiting for MongoDB..."
                sleep 2
              done

              # initialize replica set
              mongosh --host localhost /docker-entrypoint-initdb.d/mongodb-init-replica-set.js
          volumeMounts:
            - name: mongo-init-script
              mountPath: /docker-entrypoint-initdb.d
      hostAliases:
        - ip: "127.0.0.1"
          hostnames:
            - "mongo"
      containers:
        - name: mongo
          image: {{ .Values.mongo.image }}
          args: ["--replSet", "overleaf"]
          env:
            - name: MONGO_INITDB_DATABASE
              value: {{ .Values.mongo.database }}
          volumeMounts:
            - name: mongo-data
              mountPath: {{ .Values.mongo.mountPath }}
      volumes:
        - name: mongo-data
          persistentVolumeClaim:
            claimName: mongo-pvc
        - name: mongo-init-script
          configMap:
            name: mongo-init-script
            defaultMode: 0755
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  ports:
    - port: 27017
  selector:
    app: mongo
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.mongo.storageSize }}
  storageClassName: {{ .Values.persistence.storageClass }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-init-script
data:
  mongodb-init-replica-set.js: |
    rs.initiate({ _id: 'overleaf', members: [{ _id: 0, host: 'mongo:27017' }] })
